@article{Dean2008MapReduce,
author = {Dean, Jeffrey and Ghemawat, Sanjay},
title = {MapReduce: Simplified Data Processing on Large Clusters},
year = {2008},
issue_date = {January 2008},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {51},
number = {1},
issn = {0001-0782},
url = {https://doi.org/10.1145/1327452.1327492},
doi = {10.1145/1327452.1327492},
abstract = {MapReduce is a programming model and an associated implementation for processing and generating large datasets that is amenable to a broad variety of real-world tasks. Users specify the computation in terms of a map and a reduce function, and the underlying runtime system automatically parallelizes the computation across large-scale clusters of machines, handles machine failures, and schedules inter-machine communication to make efficient use of the network and disks. Programmers find the system easy to use: more than ten thousand distinct MapReduce programs have been implemented internally at Google over the past four years, and an average of one hundred thousand MapReduce jobs are executed on Google's clusters every day, processing a total of more than twenty petabytes of data per day.},
journal = {Commun. ACM},
month = {jan},
pages = {107–113},
numpages = {7}
}

@article{Gandomi2015Beyond,
title = {Beyond the hype: Big data concepts, methods, and analytics},
journal = {International Journal of Information Management},
volume = {35},
number = {2},
pages = {137-144},
year = {2015},
issn = {0268-4012},
doi = {https://doi.org/10.1016/j.ijinfomgt.2014.10.007},
url = {https://www.sciencedirect.com/science/article/pii/S0268401214001066},
author = {Amir Gandomi and Murtaza Haider},
keywords = {Big data analytics, Big data definition, Unstructured data analytics, Predictive analytics},
abstract = {Size is the first, and at times, the only dimension that leaps out at the mention of big data. This paper attempts to offer a broader definition of big data that captures its other unique and defining characteristics. The rapid evolution and adoption of big data by industry has leapfrogged the discourse to popular outlets, forcing the academic press to catch up. Academic journals in numerous disciplines, which will benefit from a relevant discussion of big data, have yet to cover the topic. This paper presents a consolidated description of big data by integrating definitions from practitioners and academics. The paper's primary focus is on the analytic methods used for big data. A particular distinguishing feature of this paper is its focus on analytics related to unstructured data, which constitute 95% of big data. This paper highlights the need to develop appropriate and efficient analytical methods to leverage massive volumes of heterogeneous data in unstructured text, audio, and video formats. This paper also reinforces the need to devise new tools for predictive analytics for structured big data. The statistical methods in practice were devised to infer from sample data. The heterogeneity, noise, and the massive size of structured big data calls for developing computationally efficient algorithms that may avoid big data pitfalls, such as spurious correlation.}
}


@inproceedings{Beaver2010Finding,
  title={Finding a Needle in Haystack: Facebook's Photo Storage.},
  author={Beaver, Doug and Kumar, Sanjeev and Li, Harry C and Sobel, Jason and Vajgel, Peter and others},
  booktitle={OSDI},
  volume={10},
  number={2010},
  pages={1--8},
  year={2010}
}

@inproceedings{Jensen2015MemInsight,
author = {Jensen, Simon Holm and Sridharan, Manu and Sen, Koushik and Chandra, Satish},
title = {MemInsight: Platform-Independent Memory Debugging for JavaScript},
year = {2015},
isbn = {9781450336758},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2786805.2786860},
doi = {10.1145/2786805.2786860},
abstract = {JavaScript programs often suffer from memory issues that can either hurt performance or eventually cause memory exhaustion. While existing snapshot-based profiling tools can be helpful, the information provided is limited to the coarse granularity at which snapshots can be taken. We present MemInsight, a tool that provides detailed, time-varying analysis of the memory behavior of JavaScript applications, including web applications. MemInsight is platform independent and runs on unmodified JavaScript engines. It employs tuned source-code instrumentation to generate a trace of memory allocations and accesses, and it leverages modern browser features to track precise information for DOM (document object model) objects. It also computes exact object lifetimes without any garbage collector assistance, and exposes this information in an easily-consumable manner for further analysis. We describe several client analyses built into MemInsight, including detection of possible memory leaks and opportunities for stack allocation and object inlining. An experimental evaluation showed that with no modifications to the runtime, MemInsight was able to expose memory issues in several real-world applications.},
booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software Engineering},
pages = {345–356},
numpages = {12},
keywords = {Memory profiling, leak detection},
location = {Bergamo, Italy},
series = {ESEC/FSE 2015}
}

@article{Asrese2019MeasuringWL,
  title={Measuring Web Latency and Rendering Performance: Method, Tools, and Longitudinal Dataset},
  author={Alemnew Sheferaw Asrese and Steffie Jacob Eravuchira and Vaibhav Bajpai and Pasi Sarolahti and J{\"o}rg Ott},
  journal={IEEE Transactions on Network and Service Management},
  year={2019},
  volume={16},
  pages={535-549}
}

@inproceedings{Gember2012Obtaining,
author = {Gember, Aaron and Akella, Aditya and Pang, Jeffrey and Varshavsky, Alexander and Caceres, Ramon},
title = {Obtaining In-Context Measurements of Cellular Network Performance},
year = {2012},
isbn = {9781450317054},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2398776.2398807},
doi = {10.1145/2398776.2398807},
abstract = {Network service providers, and other parties, require an accurate understanding of the performance cellular networks deliver to users. In particular, they often seek a measure of the network performance users experience solely when they are interacting with their device---a measure we call in-context. Acquiring such measures is challenging due to the many factors, including time and physical context, that influence cellular network performance. This paper makes two contributions. First, we conduct a large scale measurement study, based on data collected from a large cellular provider and from hundreds of controlled experiments, to shed light on the issues underlying in-context measurements. Our novel observations show that measurements must be conducted on devices which (i) recently used the network as a result of user interaction with the device, (ii) remain in the same macro-environment (e.g., indoors and stationary), and in some cases the same micro-environment (e.g., in the user's hand), during the period between normal usage and a subsequent measurement, and (iii) are currently sending/ receiving little or no user-generated traffic. Second, we design and deploy a prototype active measurement service for Android phones based on these key insights. Our analysis of 1650 measurements gathered from 12 volunteer devices shows that the system is able to obtain average throughput measurements that accurately quantify the performance experienced during times of active device and network usage.},
booktitle = {Proceedings of the 2012 Internet Measurement Conference},
pages = {287–300},
numpages = {14},
keywords = {device context, cellular network performance, active measurement},
location = {Boston, Massachusetts, USA},
series = {IMC '12}
}

@inproceedings{Nikravesh2015Mobilyzer,
author = {Nikravesh, Ashkan and Yao, Hongyi and Xu, Shichang and Choffnes, David and Mao, Z. Morley},
title = {Mobilyzer: An Open Platform for Controllable Mobile Network Measurements},
year = {2015},
isbn = {9781450334945},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
url = {https://doi.org/10.1145/2742647.2742670},
doi = {10.1145/2742647.2742670},
abstract = {Mobile Internet availability, performance and reliability have remained stubbornly opaque since the rise of cellular data access. Conducting network measurements can give us insight into user-perceived network conditions, but doing so requires careful consideration of device state and efficient use of scarce resources. Existing approaches address these concerns in ad-hoc ways.In this work we propose Mobilyzer, a platform for conducting mobile network measurement experiments in a principled manner. Our system is designed around three key principles: network measurements from mobile devices require tightly controlled access to the network interface to provide isolation; these measurements can be performed efficiently using a global view of available device resources and experiments; and distributing the platform as a library to existing apps provides the incentives and low barrier to adoption necessary for large-scale deployments. We describe our current design and implementation, and illustrate how it provides measurement isolation for applications, efficiently manages measurement experiments and enables a new class of experiments for the mobile environment.},
booktitle = {Proceedings of the 13th Annual International Conference on Mobile Systems, Applications, and Services},
pages = {389–404},
numpages = {16},
keywords = {mobile web, measurement tool, cellular networks, video, network performance},
location = {Florence, Italy},
series = {MobiSys '15}
}

@book{Gamma1995Design,
  title={Design patterns: elements of reusable object-oriented software},
  author={Gamma, Erich and Helm, Richard and Johnson, Ralph and Johnson, Ralph E and Vlissides, John},
  year={1995},
  publisher={Pearson Deutschland GmbH}
}

@book{Sommerville2015Software,
author = {Sommerville, Ian},
title = {Software Engineering},
year = {2015},
isbn = {0133943038},
publisher = {Pearson},
edition = {10th},
abstract = {For courses in computer science and software engineering The Fundamental Practice of Software Engineering Software Engineering introduces readers to the overwhelmingly important subject of software programming and development. In the past few years, computer systems have come to dominate not just our technological growth, but the foundations of our worlds major industries. This text seeks to lay out the fundamental concepts of this huge and continually growing subject area in a clear and comprehensive manner. The Tenth Edition contains new information that highlights various technological updates of recent years, providing readers with highly relevant and current information. Sommervilles experience in system dependability and systems engineering guides the text through a traditional plan-based approach that incorporates some novel agile methods. The text strives to teach the innovators of tomorrow how to create software that will make our world a better, safer, and more advanced place to live.}
}

@ARTICLE{Lee2017293,
	author = {Lee, In},
	title = {Big data: Dimensions, evolution, impacts, and challenges},
	year = {2017},
	journal = {Business Horizons},
	volume = {60},
	number = {3},
	pages = {293 – 303},
	doi = {10.1016/j.bushor.2017.01.004},
	url = {https://www.scopus.com/inward/record.uri?eid=2-s2.0-85012284270&doi=10.1016%2fj.bushor.2017.01.004&partnerID=40&md5=5327b02cd37baa800a77778dcc4deed7},
	type = {Article},
	publication_stage = {Final},
	source = {Scopus},
	note = {Cited by: 314}
}

@book{gamma1994design,
  title={Design Patterns: Elements of Reusable Object-Oriented Software},
  author={Gamma, E. and Helm, R. and Johnson, R. and Vlissides, J.},
  isbn={9780321700698},
  lccn={94034264},
  series={Addison-Wesley Professional Computing Series},
  url={https://books.google.com.br/books?id=6oHuKQe3TjQC},
  year={1994},
  publisher={Pearson Education}
}

@book{wohlin2012experimentation,
author = {Wohlin, Claes and Runeson, Per and Hst, Martin and Ohlsson, Magnus C. and Regnell, Bjrn and Wessln, Anders},
title = {Experimentation in Software Engineering},
year = {2012},
isbn = {3642290434},
publisher = {Springer Publishing Company, Incorporated},
abstract = {Like other sciences and engineering disciplines, software engineering requires a cycle of model building, experimentation, and learning. Experiments are valuable tools for all software engineers who are involved in evaluating and choosing between different methods, techniques, languages and tools. The purpose of Experimentation in Software Engineering is to introduce students, teachers, researchers, and practitioners to empirical studies in software engineering, using controlled experiments. The introduction to experimentation is provided through a process perspective, and the focus is on the steps that we have to go through to perform an experiment. The book is divided into three parts. The first part provides a background of theories and methods used in experimentation. Part II then devotes one chapter to each of the five experiment steps: scoping, planning, execution, analysis, and result presentation. Part III completes the presentation with two examples. Assignments and statistical material are provided in appendixes. Overall the book provides indispensable information regarding empirical studies in particular for experiments, but also for case studies, systematic literature reviews, and surveys. It is a revision of the authors book, which was published in 2000. In addition, substantial new material, e.g. concerning systematic literature reviews and case study research, is introduced. The book is self-contained and it is suitable as a course book in undergraduate or graduate studies where the need for empirical studies in software engineering is stressed. Exercises and assignments are included to combine the more theoretical material with practical aspects. Researchers will also benefit from the book, learning more about how to conduct empirical studies, and likewise practitioners may use it as a cookbook when evaluating new methods or techniques before implementing them in their organization.}
}

@book{pressman2009software,
author = {Pressman, Roger},
title = {Software Engineering: A Practitioner's Approach},
year = {2009},
isbn = {0073375977},
publisher = {McGraw-Hill, Inc.},
address = {USA},
edition = {7},
abstract = {For almost three decades, Roger Pressman's Software Engineering: A Practitioner's Approach has been the world's leading textbook in software engineering. The new seventh edition represents a major restructuring and update of previous editions, solidifying the book's position as the most comprehensive guide to this important subject. The seventh edition of Software Engineering: A Practitioner's Approach has been designed to consolidate and restructure the content introduced over the past two editions of the book. The chapter structure will return to a more linear presentation of software engineering topics with a direct emphasis on the major activities that are part of a generic software process. Content will focus on widely used software engineering methods and will de-emphasize or completely eliminate discussion of secondary methods, tools and techniques. The intent is to provide a more targeted, prescriptive, and focused approach, while attempting to maintain SEPA's reputation as a comprehensive guide to software engineering. The book will be organized in five (5) parts-Process, Modeling, Quality Management, Project Management, and Advanced Topics. The chapter count will remain at 32, unchanged from the sixth edition. However, eight new chapters have been developed and another six chapters have undergone major or moderate revisions. The remaining chapters have undergone minor edits/updates. Table of contents1 Software and Software EngineeringPart One The Software Process2 Process Models3 Agile DevelopmentPart Two Modeling4 Principles that Guide Practice5 Understanding Requirements6 Requirements Modeling: Scenarios, Information, and Analysis Classes7 Requirements Modeling: Flow, Behavior, Patterns, and WebApps8 Design Concepts9 Architectural Design10 Component-Level Design11 User Interface Design12 Pattern-Based Design13 WebApp DesignPart Three Quality Management14 Quality Concepts15 Review Techniques16 Software Quality Assurance17 Software Testing Strategies18 Testing Conventional Applications19 Testing Object-Oriented Applications20 Testing Web Applications21 Formal Modeling and Verification22 Software Configuration Management23 Product MetricsPart Four Managing Software Projects24 Project Management Concepts25 Process and Project Metrics26 Estimation for Software Projects27 Project Scheduling28 Risk Management29 Maintenance and ReengineeringPart Five Advanced Topics 30 Software Process Improvement31 Emerging Trends in Software Engineering32 Concluding CommentsAppendix I-An Introduction to UML Appendix II-Object-Oriented Concepts}
}

@article{brooke1995sus,
author = {Brooke, John},
year = {1995},
month = {11},
pages = {},
title = {SUS: A quick and dirty usability scale},
volume = {189},
journal = {Usability Eval. Ind.}
}



@book{MartinCleanArchtecture2017,
author = {Martin, Robert C.},
title = {Clean Architecture: A Craftsman's Guide to Software Structure and Design},
year = {2017},
isbn = {0134494164},
publisher = {Prentice Hall Press},
address = {USA},
edition = {1st},
abstract = {Practical Software Architecture Solutions from the Legendary Robert C. Martin (Uncle Bob) By applying universal rules of software architecture, you can dramatically improve developer productivity throughout the life of any software system. Now, building upon the success of his best-selling books Clean Code and The Clean Coder, legendary software craftsman Robert C. Martin (Uncle Bob) reveals those rules and helps you apply them. Martins Clean Architecture doesnt merely present options. Drawing on over a half-century of experience in software environments of every imaginable type, Martin tells you what choices to make and why they are critical to your success. As youve come to expect from Uncle Bob, this book is packed with direct, no-nonsense solutions for the real challenges youll facethe ones that will make or break your projects. Learn what software architects need to achieveand core disciplines and practices for achieving it Master essential software design principles for addressing function, component separation, and data management See how programming paradigms impose discipline by restricting what developers can do Understand whats critically important and whats merely a detail Implement optimal, high-level structures for web, database, thick-client, console, and embedded applications Define appropriate boundaries and layers, and organize components and services See why designs and architectures go wrong, and how to prevent (or fix) these failures Clean Architecture is essential reading for every current or aspiring software architect, systems analyst, system designer, and software managerand for every programmer who must execute someone elses designs. Register your product at informit.com/register for convenient access to downloads, updates, and/or corrections as they become available.}
}

@book{Meyer1997ObjectOrientedSoftwareConstruction,
  abstract = {The developer of the acclaimed Eiffel programming language comes through with one of the clearest and most informative books about computers ever committed to paper. The book is the gospel of object-oriented technology and it deserves to be spread everywhere. Meyer opens with coverage of the need for an object-oriented approach to software development, citing improved quality and development speed as key advantages of the approach. He then explains all the key criteria that define an object- oriented approach to a problem. Meyer pays attention to techniques, such as classes, objects, memory management, and more, returning to each technique and polishing his readers' knowledge of it as he explains how to employ it well. In a section on advanced topics, Meyer explores interesting and relevant topics, such as persistent objects stored in a database. He also offers a sort of Do and Don't section in which he enumerates common mistakes and ways to avoid them. Management information isn't the main point of Object-Oriented Software Construction, but you'll find some in its pages. Meyer concludes his tour de force with comparisons of all the key object-oriented languages, including Java. He also covers the potential of simulating object technology in non-object-oriented languages, such as Pascal and Fortran.},
  added-at = {2017-05-01T07:59:39.000+0200},
  address = {Upper Saddle River, NJ},
  author = {Meyer, Bertrand},
  biburl = {https://www.bibsonomy.org/bibtex/2bcacee55fd29e37910ebca67c8fa52c8/flint63},
  edition = 2,
  file = {eBook:1900-99/Meyer97.pdf:PDF;InformIT Product page:http\://www.informit.com/title/0136291554:URL;Amazon Search inside:http\://www.amazon.de/gp/reader/0136291554/:URL},
  groups = {public},
  interhash = {730026b71c349fa74ee3198228fab640},
  intrahash = {bcacee55fd29e37910ebca67c8fa52c8},
  isbn = {978-0-13-629155-8},
  keywords = {01841 105 book shelf software development oop design},
  publisher = {Prentice Hall},
  timestamp = {2018-04-16T12:08:14.000+0200},
  title = {Object-Oriented Software Construction},
  username = {flint63},
  year = 1997
}


@inproceedings{Martin2000TheOP,
  title={The open-closed principle},
  author={Robert C. Martin},
  year={2000},
  url={https://api.semanticscholar.org/CorpusID:15058653}
}